// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: usuarioJogo.sql

package repositoryIMPL

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUsuarioJogo = `-- name: CreateUsuarioJogo :one
INSERT INTO t_usuario_jogo (usuario_id, jogo_id, data_hora)
VALUES ($1, $2, $3)
RETURNING id, usuario_id, jogo_id, data_hora
`

type CreateUsuarioJogoParams struct {
	UsuarioID int32
	JogoID    int32
	DataHora  pgtype.Timestamp
}

func (q *Queries) CreateUsuarioJogo(ctx context.Context, arg CreateUsuarioJogoParams) (TUsuarioJogo, error) {
	row := q.db.QueryRow(ctx, createUsuarioJogo, arg.UsuarioID, arg.JogoID, arg.DataHora)
	var i TUsuarioJogo
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.JogoID,
		&i.DataHora,
	)
	return i, err
}

const deleteUsuarioJogoById = `-- name: DeleteUsuarioJogoById :execrows
DELETE FROM t_usuario_jogo 
WHERE id = $1 
RETURNING id, usuario_id, jogo_id, data_hora
`

func (q *Queries) DeleteUsuarioJogoById(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUsuarioJogoById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllUsuarioJogos = `-- name: FindAllUsuarioJogos :many
SELECT id, usuario_id, jogo_id, data_hora FROM t_usuario_jogo
`

func (q *Queries) FindAllUsuarioJogos(ctx context.Context) ([]TUsuarioJogo, error) {
	rows, err := q.db.Query(ctx, findAllUsuarioJogos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TUsuarioJogo
	for rows.Next() {
		var i TUsuarioJogo
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.JogoID,
			&i.DataHora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsuarioJogoByID = `-- name: FindUsuarioJogoByID :one
SELECT id, usuario_id, jogo_id, data_hora FROM t_usuario_jogo WHERE id = $1
`

func (q *Queries) FindUsuarioJogoByID(ctx context.Context, id int32) (TUsuarioJogo, error) {
	row := q.db.QueryRow(ctx, findUsuarioJogoByID, id)
	var i TUsuarioJogo
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.JogoID,
		&i.DataHora,
	)
	return i, err
}

const findUsuarioJogoByJogo = `-- name: FindUsuarioJogoByJogo :many
SELECT id, usuario_id, jogo_id, data_hora FROM t_usuario_jogo WHERE jogo_id = $1
`

func (q *Queries) FindUsuarioJogoByJogo(ctx context.Context, jogoID int32) ([]TUsuarioJogo, error) {
	rows, err := q.db.Query(ctx, findUsuarioJogoByJogo, jogoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TUsuarioJogo
	for rows.Next() {
		var i TUsuarioJogo
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.JogoID,
			&i.DataHora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsuarioJogoByUsuario = `-- name: FindUsuarioJogoByUsuario :many
SELECT id, usuario_id, jogo_id, data_hora FROM t_usuario_jogo WHERE usuario_id = $1
`

func (q *Queries) FindUsuarioJogoByUsuario(ctx context.Context, usuarioID int32) ([]TUsuarioJogo, error) {
	rows, err := q.db.Query(ctx, findUsuarioJogoByUsuario, usuarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TUsuarioJogo
	for rows.Next() {
		var i TUsuarioJogo
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.JogoID,
			&i.DataHora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUsuarioJogo = `-- name: UpdateUsuarioJogo :one
UPDATE t_usuario_jogo 
SET usuario_id = $1, jogo_id = $2, data_hora = $3
WHERE id = $4
RETURNING id, usuario_id, jogo_id, data_hora
`

type UpdateUsuarioJogoParams struct {
	UsuarioID int32
	JogoID    int32
	DataHora  pgtype.Timestamp
	ID        int32
}

func (q *Queries) UpdateUsuarioJogo(ctx context.Context, arg UpdateUsuarioJogoParams) (TUsuarioJogo, error) {
	row := q.db.QueryRow(ctx, updateUsuarioJogo,
		arg.UsuarioID,
		arg.JogoID,
		arg.DataHora,
		arg.ID,
	)
	var i TUsuarioJogo
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.JogoID,
		&i.DataHora,
	)
	return i, err
}
