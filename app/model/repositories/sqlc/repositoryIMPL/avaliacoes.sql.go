// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: avaliacoes.sql

package repositoryIMPL

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAvaliacao = `-- name: CreateAvaliacao :one
INSERT INTO t_avaliacoes (usuario_id, produto_id, jogo_id, nota, avaliacao) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, usuario_id, produto_id, jogo_id, nota, avaliacao
`

type CreateAvaliacaoParams struct {
	UsuarioID int32
	ProdutoID pgtype.Int4
	JogoID    pgtype.Int4
	Nota      pgtype.Int4
	Avaliacao pgtype.Text
}

func (q *Queries) CreateAvaliacao(ctx context.Context, arg CreateAvaliacaoParams) (TAvaliaco, error) {
	row := q.db.QueryRow(ctx, createAvaliacao,
		arg.UsuarioID,
		arg.ProdutoID,
		arg.JogoID,
		arg.Nota,
		arg.Avaliacao,
	)
	var i TAvaliaco
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.ProdutoID,
		&i.JogoID,
		&i.Nota,
		&i.Avaliacao,
	)
	return i, err
}

const deleteAvaliacaoById = `-- name: DeleteAvaliacaoById :execrows
DELETE FROM t_avaliacoes WHERE id = $1 
RETURNING id
`

func (q *Queries) DeleteAvaliacaoById(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAvaliacaoById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllAvaliacoes = `-- name: FindAllAvaliacoes :many
SELECT id, usuario_id, produto_id, jogo_id, nota, avaliacao FROM t_avaliacoes
`

func (q *Queries) FindAllAvaliacoes(ctx context.Context) ([]TAvaliaco, error) {
	rows, err := q.db.Query(ctx, findAllAvaliacoes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TAvaliaco
	for rows.Next() {
		var i TAvaliaco
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.ProdutoID,
			&i.JogoID,
			&i.Nota,
			&i.Avaliacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAvaliacaoById = `-- name: FindAvaliacaoById :one
SELECT id, usuario_id, produto_id, jogo_id, nota, avaliacao FROM t_avaliacoes WHERE id = $1
`

func (q *Queries) FindAvaliacaoById(ctx context.Context, id int32) (TAvaliaco, error) {
	row := q.db.QueryRow(ctx, findAvaliacaoById, id)
	var i TAvaliaco
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.ProdutoID,
		&i.JogoID,
		&i.Nota,
		&i.Avaliacao,
	)
	return i, err
}

const findAvaliacaoByJogo = `-- name: FindAvaliacaoByJogo :many
SELECT id, usuario_id, produto_id, jogo_id, nota, avaliacao FROM t_avaliacoes WHERE jogo_id = $1
`

func (q *Queries) FindAvaliacaoByJogo(ctx context.Context, jogoID pgtype.Int4) ([]TAvaliaco, error) {
	rows, err := q.db.Query(ctx, findAvaliacaoByJogo, jogoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TAvaliaco
	for rows.Next() {
		var i TAvaliaco
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.ProdutoID,
			&i.JogoID,
			&i.Nota,
			&i.Avaliacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAvaliacaoByProduto = `-- name: FindAvaliacaoByProduto :many
SELECT id, usuario_id, produto_id, jogo_id, nota, avaliacao FROM t_avaliacoes WHERE produto_id = $1
`

func (q *Queries) FindAvaliacaoByProduto(ctx context.Context, produtoID pgtype.Int4) ([]TAvaliaco, error) {
	rows, err := q.db.Query(ctx, findAvaliacaoByProduto, produtoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TAvaliaco
	for rows.Next() {
		var i TAvaliaco
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.ProdutoID,
			&i.JogoID,
			&i.Nota,
			&i.Avaliacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAvaliacaoByUsuario = `-- name: FindAvaliacaoByUsuario :many
SELECT id, usuario_id, produto_id, jogo_id, nota, avaliacao FROM t_avaliacoes WHERE usuario_id = $1
`

func (q *Queries) FindAvaliacaoByUsuario(ctx context.Context, usuarioID int32) ([]TAvaliaco, error) {
	rows, err := q.db.Query(ctx, findAvaliacaoByUsuario, usuarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TAvaliaco
	for rows.Next() {
		var i TAvaliaco
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.ProdutoID,
			&i.JogoID,
			&i.Nota,
			&i.Avaliacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvaliacao = `-- name: UpdateAvaliacao :one
UPDATE t_avaliacoes 
SET usuario_id = $1, produto_id = $2, jogo_id = $3, nota = $4, avaliacao = $5
WHERE id = $6
RETURNING id, usuario_id, produto_id, jogo_id, nota, avaliacao
`

type UpdateAvaliacaoParams struct {
	UsuarioID int32
	ProdutoID pgtype.Int4
	JogoID    pgtype.Int4
	Nota      pgtype.Int4
	Avaliacao pgtype.Text
	ID        int32
}

func (q *Queries) UpdateAvaliacao(ctx context.Context, arg UpdateAvaliacaoParams) (TAvaliaco, error) {
	row := q.db.QueryRow(ctx, updateAvaliacao,
		arg.UsuarioID,
		arg.ProdutoID,
		arg.JogoID,
		arg.Nota,
		arg.Avaliacao,
		arg.ID,
	)
	var i TAvaliaco
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.ProdutoID,
		&i.JogoID,
		&i.Nota,
		&i.Avaliacao,
	)
	return i, err
}
