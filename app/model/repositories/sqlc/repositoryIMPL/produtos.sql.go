// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: produtos.sql

package repositoryIMPL

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduto = `-- name: CreateProduto :one
INSERT INTO t_produtos (nome, descricao, genero)
VALUES ($1, $2, $3)
RETURNING id, nome, descricao, avaliacao, genero
`

type CreateProdutoParams struct {
	Nome      string
	Descricao pgtype.Text
	Genero    pgtype.Text
}

func (q *Queries) CreateProduto(ctx context.Context, arg CreateProdutoParams) (TProduto, error) {
	row := q.db.QueryRow(ctx, createProduto, arg.Nome, arg.Descricao, arg.Genero)
	var i TProduto
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Avaliacao,
		&i.Genero,
	)
	return i, err
}

const deleteProdutoById = `-- name: DeleteProdutoById :execrows
DELETE FROM t_produtos WHERE id = $1 
RETURNING id
`

func (q *Queries) DeleteProdutoById(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteProdutoById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllProdutos = `-- name: FindAllProdutos :many
SELECT id, nome, descricao, avaliacao, genero FROM t_produtos
`

func (q *Queries) FindAllProdutos(ctx context.Context) ([]TProduto, error) {
	rows, err := q.db.Query(ctx, findAllProdutos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TProduto
	for rows.Next() {
		var i TProduto
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Avaliacao,
			&i.Genero,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProdutoByGenero = `-- name: FindProdutoByGenero :many
SELECT id, nome, descricao, avaliacao, genero FROM t_produtos WHERE genero ILIKE '%' || $1 || '%'
`

func (q *Queries) FindProdutoByGenero(ctx context.Context, dollar_1 pgtype.Text) ([]TProduto, error) {
	rows, err := q.db.Query(ctx, findProdutoByGenero, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TProduto
	for rows.Next() {
		var i TProduto
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Avaliacao,
			&i.Genero,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findProdutoByID = `-- name: FindProdutoByID :one
SELECT id, nome, descricao, avaliacao, genero FROM t_produtos WHERE id = $1
`

func (q *Queries) FindProdutoByID(ctx context.Context, id int32) (TProduto, error) {
	row := q.db.QueryRow(ctx, findProdutoByID, id)
	var i TProduto
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Avaliacao,
		&i.Genero,
	)
	return i, err
}

const findProdutoByNome = `-- name: FindProdutoByNome :many
SELECT id, nome, descricao, avaliacao, genero FROM t_produtos WHERE nome ILIKE '%' || $1 || '%'
`

func (q *Queries) FindProdutoByNome(ctx context.Context, dollar_1 pgtype.Text) ([]TProduto, error) {
	rows, err := q.db.Query(ctx, findProdutoByNome, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TProduto
	for rows.Next() {
		var i TProduto
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Avaliacao,
			&i.Genero,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduto = `-- name: UpdateProduto :one
UPDATE t_produtos 
SET nome = $1, descricao = $2, genero = $3
WHERE id = $4
RETURNING id, nome, descricao, avaliacao, genero
`

type UpdateProdutoParams struct {
	Nome      string
	Descricao pgtype.Text
	Genero    pgtype.Text
	ID        int32
}

func (q *Queries) UpdateProduto(ctx context.Context, arg UpdateProdutoParams) (TProduto, error) {
	row := q.db.QueryRow(ctx, updateProduto,
		arg.Nome,
		arg.Descricao,
		arg.Genero,
		arg.ID,
	)
	var i TProduto
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Avaliacao,
		&i.Genero,
	)
	return i, err
}
