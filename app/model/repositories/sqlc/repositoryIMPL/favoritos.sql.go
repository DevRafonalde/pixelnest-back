// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favoritos.sql

package repositoryIMPL

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFavorito = `-- name: CreateFavorito :one
INSERT INTO t_favoritos (usuario_id, produto_id, jogo_id) 
VALUES ($1, $2, $3)
RETURNING id, usuario_id, produto_id, jogo_id
`

type CreateFavoritoParams struct {
	UsuarioID int32
	ProdutoID pgtype.Int4
	JogoID    pgtype.Int4
}

func (q *Queries) CreateFavorito(ctx context.Context, arg CreateFavoritoParams) (TFavorito, error) {
	row := q.db.QueryRow(ctx, createFavorito, arg.UsuarioID, arg.ProdutoID, arg.JogoID)
	var i TFavorito
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.ProdutoID,
		&i.JogoID,
	)
	return i, err
}

const deleteFavoritoById = `-- name: DeleteFavoritoById :execrows
DELETE FROM t_favoritos WHERE id = $1 
RETURNING id
`

func (q *Queries) DeleteFavoritoById(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteFavoritoById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findFavoritoByID = `-- name: FindFavoritoByID :one
SELECT id, usuario_id, produto_id, jogo_id FROM t_favoritos WHERE id = $1
`

func (q *Queries) FindFavoritoByID(ctx context.Context, id int32) (TFavorito, error) {
	row := q.db.QueryRow(ctx, findFavoritoByID, id)
	var i TFavorito
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.ProdutoID,
		&i.JogoID,
	)
	return i, err
}

const findFavoritoByUsuario = `-- name: FindFavoritoByUsuario :many
SELECT id, usuario_id, produto_id, jogo_id FROM t_favoritos WHERE usuario_id = $1
`

func (q *Queries) FindFavoritoByUsuario(ctx context.Context, usuarioID int32) ([]TFavorito, error) {
	rows, err := q.db.Query(ctx, findFavoritoByUsuario, usuarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TFavorito
	for rows.Next() {
		var i TFavorito
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioID,
			&i.ProdutoID,
			&i.JogoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFavorito = `-- name: UpdateFavorito :one
UPDATE t_favoritos 
SET usuario_id = $1, produto_id = $2, jogo_id = $3
WHERE id = $4
RETURNING id, usuario_id, produto_id, jogo_id
`

type UpdateFavoritoParams struct {
	UsuarioID int32
	ProdutoID pgtype.Int4
	JogoID    pgtype.Int4
	ID        int32
}

func (q *Queries) UpdateFavorito(ctx context.Context, arg UpdateFavoritoParams) (TFavorito, error) {
	row := q.db.QueryRow(ctx, updateFavorito,
		arg.UsuarioID,
		arg.ProdutoID,
		arg.JogoID,
		arg.ID,
	)
	var i TFavorito
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.ProdutoID,
		&i.JogoID,
	)
	return i, err
}
