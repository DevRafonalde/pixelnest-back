// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: avaliacoes.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Avaliacaos_FindAllAvaliacoes_FullMethodName      = "/grpc.Avaliacaos/FindAllAvaliacoes"
	Avaliacaos_FindAvaliacaoById_FullMethodName      = "/grpc.Avaliacaos/FindAvaliacaoById"
	Avaliacaos_FindAvaliacaoByUsuario_FullMethodName = "/grpc.Avaliacaos/FindAvaliacaoByUsuario"
	Avaliacaos_FindAvaliacaoByProduto_FullMethodName = "/grpc.Avaliacaos/FindAvaliacaoByProduto"
	Avaliacaos_FindAvaliacaoByJogo_FullMethodName    = "/grpc.Avaliacaos/FindAvaliacaoByJogo"
	Avaliacaos_CreateAvaliacao_FullMethodName        = "/grpc.Avaliacaos/CreateAvaliacao"
	Avaliacaos_UpdateAvaliacao_FullMethodName        = "/grpc.Avaliacaos/UpdateAvaliacao"
	Avaliacaos_DeleteAvaliacao_FullMethodName        = "/grpc.Avaliacaos/DeleteAvaliacao"
)

// AvaliacaosClient is the client API for Avaliacaos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definição do serviço
type AvaliacaosClient interface {
	FindAllAvaliacoes(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaAvaliacoes, error)
	FindAvaliacaoById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Avaliacao, error)
	FindAvaliacaoByUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ListaAvaliacoes, error)
	FindAvaliacaoByProduto(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ListaAvaliacoes, error)
	FindAvaliacaoByJogo(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ListaAvaliacoes, error)
	CreateAvaliacao(ctx context.Context, in *Avaliacao, opts ...grpc.CallOption) (*Avaliacao, error)
	UpdateAvaliacao(ctx context.Context, in *Avaliacao, opts ...grpc.CallOption) (*Avaliacao, error)
	DeleteAvaliacao(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error)
}

type avaliacaosClient struct {
	cc grpc.ClientConnInterface
}

func NewAvaliacaosClient(cc grpc.ClientConnInterface) AvaliacaosClient {
	return &avaliacaosClient{cc}
}

func (c *avaliacaosClient) FindAllAvaliacoes(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaAvaliacoes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaAvaliacoes)
	err := c.cc.Invoke(ctx, Avaliacaos_FindAllAvaliacoes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaliacaosClient) FindAvaliacaoById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Avaliacao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Avaliacao)
	err := c.cc.Invoke(ctx, Avaliacaos_FindAvaliacaoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaliacaosClient) FindAvaliacaoByUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ListaAvaliacoes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaAvaliacoes)
	err := c.cc.Invoke(ctx, Avaliacaos_FindAvaliacaoByUsuario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaliacaosClient) FindAvaliacaoByProduto(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ListaAvaliacoes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaAvaliacoes)
	err := c.cc.Invoke(ctx, Avaliacaos_FindAvaliacaoByProduto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaliacaosClient) FindAvaliacaoByJogo(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ListaAvaliacoes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaAvaliacoes)
	err := c.cc.Invoke(ctx, Avaliacaos_FindAvaliacaoByJogo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaliacaosClient) CreateAvaliacao(ctx context.Context, in *Avaliacao, opts ...grpc.CallOption) (*Avaliacao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Avaliacao)
	err := c.cc.Invoke(ctx, Avaliacaos_CreateAvaliacao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaliacaosClient) UpdateAvaliacao(ctx context.Context, in *Avaliacao, opts ...grpc.CallOption) (*Avaliacao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Avaliacao)
	err := c.cc.Invoke(ctx, Avaliacaos_UpdateAvaliacao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avaliacaosClient) DeleteAvaliacao(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Avaliacaos_DeleteAvaliacao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvaliacaosServer is the server API for Avaliacaos service.
// All implementations must embed UnimplementedAvaliacaosServer
// for forward compatibility.
//
// Definição do serviço
type AvaliacaosServer interface {
	FindAllAvaliacoes(context.Context, *RequestVazio) (*ListaAvaliacoes, error)
	FindAvaliacaoById(context.Context, *RequestId) (*Avaliacao, error)
	FindAvaliacaoByUsuario(context.Context, *RequestId) (*ListaAvaliacoes, error)
	FindAvaliacaoByProduto(context.Context, *RequestId) (*ListaAvaliacoes, error)
	FindAvaliacaoByJogo(context.Context, *RequestId) (*ListaAvaliacoes, error)
	CreateAvaliacao(context.Context, *Avaliacao) (*Avaliacao, error)
	UpdateAvaliacao(context.Context, *Avaliacao) (*Avaliacao, error)
	DeleteAvaliacao(context.Context, *RequestId) (*ResponseBool, error)
	mustEmbedUnimplementedAvaliacaosServer()
}

// UnimplementedAvaliacaosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAvaliacaosServer struct{}

func (UnimplementedAvaliacaosServer) FindAllAvaliacoes(context.Context, *RequestVazio) (*ListaAvaliacoes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAvaliacoes not implemented")
}
func (UnimplementedAvaliacaosServer) FindAvaliacaoById(context.Context, *RequestId) (*Avaliacao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAvaliacaoById not implemented")
}
func (UnimplementedAvaliacaosServer) FindAvaliacaoByUsuario(context.Context, *RequestId) (*ListaAvaliacoes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAvaliacaoByUsuario not implemented")
}
func (UnimplementedAvaliacaosServer) FindAvaliacaoByProduto(context.Context, *RequestId) (*ListaAvaliacoes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAvaliacaoByProduto not implemented")
}
func (UnimplementedAvaliacaosServer) FindAvaliacaoByJogo(context.Context, *RequestId) (*ListaAvaliacoes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAvaliacaoByJogo not implemented")
}
func (UnimplementedAvaliacaosServer) CreateAvaliacao(context.Context, *Avaliacao) (*Avaliacao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvaliacao not implemented")
}
func (UnimplementedAvaliacaosServer) UpdateAvaliacao(context.Context, *Avaliacao) (*Avaliacao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvaliacao not implemented")
}
func (UnimplementedAvaliacaosServer) DeleteAvaliacao(context.Context, *RequestId) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAvaliacao not implemented")
}
func (UnimplementedAvaliacaosServer) mustEmbedUnimplementedAvaliacaosServer() {}
func (UnimplementedAvaliacaosServer) testEmbeddedByValue()                    {}

// UnsafeAvaliacaosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvaliacaosServer will
// result in compilation errors.
type UnsafeAvaliacaosServer interface {
	mustEmbedUnimplementedAvaliacaosServer()
}

func RegisterAvaliacaosServer(s grpc.ServiceRegistrar, srv AvaliacaosServer) {
	// If the following call pancis, it indicates UnimplementedAvaliacaosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Avaliacaos_ServiceDesc, srv)
}

func _Avaliacaos_FindAllAvaliacoes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVazio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).FindAllAvaliacoes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_FindAllAvaliacoes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).FindAllAvaliacoes(ctx, req.(*RequestVazio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avaliacaos_FindAvaliacaoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).FindAvaliacaoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_FindAvaliacaoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).FindAvaliacaoById(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avaliacaos_FindAvaliacaoByUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).FindAvaliacaoByUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_FindAvaliacaoByUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).FindAvaliacaoByUsuario(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avaliacaos_FindAvaliacaoByProduto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).FindAvaliacaoByProduto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_FindAvaliacaoByProduto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).FindAvaliacaoByProduto(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avaliacaos_FindAvaliacaoByJogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).FindAvaliacaoByJogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_FindAvaliacaoByJogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).FindAvaliacaoByJogo(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avaliacaos_CreateAvaliacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Avaliacao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).CreateAvaliacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_CreateAvaliacao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).CreateAvaliacao(ctx, req.(*Avaliacao))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avaliacaos_UpdateAvaliacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Avaliacao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).UpdateAvaliacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_UpdateAvaliacao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).UpdateAvaliacao(ctx, req.(*Avaliacao))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avaliacaos_DeleteAvaliacao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvaliacaosServer).DeleteAvaliacao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avaliacaos_DeleteAvaliacao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvaliacaosServer).DeleteAvaliacao(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

// Avaliacaos_ServiceDesc is the grpc.ServiceDesc for Avaliacaos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Avaliacaos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Avaliacaos",
	HandlerType: (*AvaliacaosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllAvaliacoes",
			Handler:    _Avaliacaos_FindAllAvaliacoes_Handler,
		},
		{
			MethodName: "FindAvaliacaoById",
			Handler:    _Avaliacaos_FindAvaliacaoById_Handler,
		},
		{
			MethodName: "FindAvaliacaoByUsuario",
			Handler:    _Avaliacaos_FindAvaliacaoByUsuario_Handler,
		},
		{
			MethodName: "FindAvaliacaoByProduto",
			Handler:    _Avaliacaos_FindAvaliacaoByProduto_Handler,
		},
		{
			MethodName: "FindAvaliacaoByJogo",
			Handler:    _Avaliacaos_FindAvaliacaoByJogo_Handler,
		},
		{
			MethodName: "CreateAvaliacao",
			Handler:    _Avaliacaos_CreateAvaliacao_Handler,
		},
		{
			MethodName: "UpdateAvaliacao",
			Handler:    _Avaliacaos_UpdateAvaliacao_Handler,
		},
		{
			MethodName: "DeleteAvaliacao",
			Handler:    _Avaliacaos_DeleteAvaliacao_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avaliacoes.proto",
}
