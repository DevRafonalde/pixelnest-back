// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: usuarios.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Usuarios_FindAllUsuarios_FullMethodName     = "/grpc.Usuarios/FindAllUsuarios"
	Usuarios_FindUsuarioById_FullMethodName     = "/grpc.Usuarios/FindUsuarioById"
	Usuarios_GetPerfisVinculados_FullMethodName = "/grpc.Usuarios/GetPerfisVinculados"
	Usuarios_CreateUsuario_FullMethodName       = "/grpc.Usuarios/CreateUsuario"
	Usuarios_CloneUsuario_FullMethodName        = "/grpc.Usuarios/CloneUsuario"
	Usuarios_UpdateUsuario_FullMethodName       = "/grpc.Usuarios/UpdateUsuario"
	Usuarios_AlterarSenhaAdmin_FullMethodName   = "/grpc.Usuarios/AlterarSenhaAdmin"
	Usuarios_AlterarSenhaUsuario_FullMethodName = "/grpc.Usuarios/AlterarSenhaUsuario"
	Usuarios_AtivarUsuario_FullMethodName       = "/grpc.Usuarios/AtivarUsuario"
	Usuarios_DesativarUsuario_FullMethodName    = "/grpc.Usuarios/DesativarUsuario"
	Usuarios_Login_FullMethodName               = "/grpc.Usuarios/Login"
	Usuarios_TokenResetSenha_FullMethodName     = "/grpc.Usuarios/TokenResetSenha"
	Usuarios_ResetSenha_FullMethodName          = "/grpc.Usuarios/ResetSenha"
)

// UsuariosClient is the client API for Usuarios service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definição do serviço
type UsuariosClient interface {
	FindAllUsuarios(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaUsuarios, error)
	FindUsuarioById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*UsuarioPerfis, error)
	GetPerfisVinculados(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponsePerfisVinculados, error)
	CreateUsuario(ctx context.Context, in *UsuarioPerfis, opts ...grpc.CallOption) (*UsuarioPerfis, error)
	CloneUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*UsuarioPerfis, error)
	UpdateUsuario(ctx context.Context, in *UsuarioPerfis, opts ...grpc.CallOption) (*UsuarioPerfis, error)
	AlterarSenhaAdmin(ctx context.Context, in *RequestAlterarSenhaAdmin, opts ...grpc.CallOption) (*ResponseBool, error)
	AlterarSenhaUsuario(ctx context.Context, in *RequestAlterarSenhaUsuario, opts ...grpc.CallOption) (*ResponseBool, error)
	AtivarUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error)
	DesativarUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error)
	Login(ctx context.Context, in *LoginUsuario, opts ...grpc.CallOption) (*RetornoLoginUsuario, error)
	TokenResetSenha(ctx context.Context, in *EmailReset, opts ...grpc.CallOption) (*ResponseTokenResetSenha, error)
	ResetSenha(ctx context.Context, in *ResetSenhaUsuario, opts ...grpc.CallOption) (*ResponseBool, error)
}

type usuariosClient struct {
	cc grpc.ClientConnInterface
}

func NewUsuariosClient(cc grpc.ClientConnInterface) UsuariosClient {
	return &usuariosClient{cc}
}

func (c *usuariosClient) FindAllUsuarios(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaUsuarios, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaUsuarios)
	err := c.cc.Invoke(ctx, Usuarios_FindAllUsuarios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) FindUsuarioById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*UsuarioPerfis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsuarioPerfis)
	err := c.cc.Invoke(ctx, Usuarios_FindUsuarioById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) GetPerfisVinculados(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponsePerfisVinculados, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponsePerfisVinculados)
	err := c.cc.Invoke(ctx, Usuarios_GetPerfisVinculados_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) CreateUsuario(ctx context.Context, in *UsuarioPerfis, opts ...grpc.CallOption) (*UsuarioPerfis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsuarioPerfis)
	err := c.cc.Invoke(ctx, Usuarios_CreateUsuario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) CloneUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*UsuarioPerfis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsuarioPerfis)
	err := c.cc.Invoke(ctx, Usuarios_CloneUsuario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) UpdateUsuario(ctx context.Context, in *UsuarioPerfis, opts ...grpc.CallOption) (*UsuarioPerfis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsuarioPerfis)
	err := c.cc.Invoke(ctx, Usuarios_UpdateUsuario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) AlterarSenhaAdmin(ctx context.Context, in *RequestAlterarSenhaAdmin, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Usuarios_AlterarSenhaAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) AlterarSenhaUsuario(ctx context.Context, in *RequestAlterarSenhaUsuario, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Usuarios_AlterarSenhaUsuario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) AtivarUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Usuarios_AtivarUsuario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) DesativarUsuario(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Usuarios_DesativarUsuario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) Login(ctx context.Context, in *LoginUsuario, opts ...grpc.CallOption) (*RetornoLoginUsuario, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetornoLoginUsuario)
	err := c.cc.Invoke(ctx, Usuarios_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) TokenResetSenha(ctx context.Context, in *EmailReset, opts ...grpc.CallOption) (*ResponseTokenResetSenha, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseTokenResetSenha)
	err := c.cc.Invoke(ctx, Usuarios_TokenResetSenha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usuariosClient) ResetSenha(ctx context.Context, in *ResetSenhaUsuario, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Usuarios_ResetSenha_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsuariosServer is the server API for Usuarios service.
// All implementations must embed UnimplementedUsuariosServer
// for forward compatibility.
//
// Definição do serviço
type UsuariosServer interface {
	FindAllUsuarios(context.Context, *RequestVazio) (*ListaUsuarios, error)
	FindUsuarioById(context.Context, *RequestId) (*UsuarioPerfis, error)
	GetPerfisVinculados(context.Context, *RequestId) (*ResponsePerfisVinculados, error)
	CreateUsuario(context.Context, *UsuarioPerfis) (*UsuarioPerfis, error)
	CloneUsuario(context.Context, *RequestId) (*UsuarioPerfis, error)
	UpdateUsuario(context.Context, *UsuarioPerfis) (*UsuarioPerfis, error)
	AlterarSenhaAdmin(context.Context, *RequestAlterarSenhaAdmin) (*ResponseBool, error)
	AlterarSenhaUsuario(context.Context, *RequestAlterarSenhaUsuario) (*ResponseBool, error)
	AtivarUsuario(context.Context, *RequestId) (*ResponseBool, error)
	DesativarUsuario(context.Context, *RequestId) (*ResponseBool, error)
	Login(context.Context, *LoginUsuario) (*RetornoLoginUsuario, error)
	TokenResetSenha(context.Context, *EmailReset) (*ResponseTokenResetSenha, error)
	ResetSenha(context.Context, *ResetSenhaUsuario) (*ResponseBool, error)
	mustEmbedUnimplementedUsuariosServer()
}

// UnimplementedUsuariosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsuariosServer struct{}

func (UnimplementedUsuariosServer) FindAllUsuarios(context.Context, *RequestVazio) (*ListaUsuarios, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllUsuarios not implemented")
}
func (UnimplementedUsuariosServer) FindUsuarioById(context.Context, *RequestId) (*UsuarioPerfis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsuarioById not implemented")
}
func (UnimplementedUsuariosServer) GetPerfisVinculados(context.Context, *RequestId) (*ResponsePerfisVinculados, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerfisVinculados not implemented")
}
func (UnimplementedUsuariosServer) CreateUsuario(context.Context, *UsuarioPerfis) (*UsuarioPerfis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsuario not implemented")
}
func (UnimplementedUsuariosServer) CloneUsuario(context.Context, *RequestId) (*UsuarioPerfis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneUsuario not implemented")
}
func (UnimplementedUsuariosServer) UpdateUsuario(context.Context, *UsuarioPerfis) (*UsuarioPerfis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsuario not implemented")
}
func (UnimplementedUsuariosServer) AlterarSenhaAdmin(context.Context, *RequestAlterarSenhaAdmin) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterarSenhaAdmin not implemented")
}
func (UnimplementedUsuariosServer) AlterarSenhaUsuario(context.Context, *RequestAlterarSenhaUsuario) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterarSenhaUsuario not implemented")
}
func (UnimplementedUsuariosServer) AtivarUsuario(context.Context, *RequestId) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtivarUsuario not implemented")
}
func (UnimplementedUsuariosServer) DesativarUsuario(context.Context, *RequestId) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesativarUsuario not implemented")
}
func (UnimplementedUsuariosServer) Login(context.Context, *LoginUsuario) (*RetornoLoginUsuario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsuariosServer) TokenResetSenha(context.Context, *EmailReset) (*ResponseTokenResetSenha, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenResetSenha not implemented")
}
func (UnimplementedUsuariosServer) ResetSenha(context.Context, *ResetSenhaUsuario) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSenha not implemented")
}
func (UnimplementedUsuariosServer) mustEmbedUnimplementedUsuariosServer() {}
func (UnimplementedUsuariosServer) testEmbeddedByValue()                  {}

// UnsafeUsuariosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsuariosServer will
// result in compilation errors.
type UnsafeUsuariosServer interface {
	mustEmbedUnimplementedUsuariosServer()
}

func RegisterUsuariosServer(s grpc.ServiceRegistrar, srv UsuariosServer) {
	// If the following call pancis, it indicates UnimplementedUsuariosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Usuarios_ServiceDesc, srv)
}

func _Usuarios_FindAllUsuarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVazio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).FindAllUsuarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_FindAllUsuarios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).FindAllUsuarios(ctx, req.(*RequestVazio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_FindUsuarioById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).FindUsuarioById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_FindUsuarioById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).FindUsuarioById(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_GetPerfisVinculados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).GetPerfisVinculados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_GetPerfisVinculados_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).GetPerfisVinculados(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_CreateUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsuarioPerfis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).CreateUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_CreateUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).CreateUsuario(ctx, req.(*UsuarioPerfis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_CloneUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).CloneUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_CloneUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).CloneUsuario(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_UpdateUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsuarioPerfis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).UpdateUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_UpdateUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).UpdateUsuario(ctx, req.(*UsuarioPerfis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_AlterarSenhaAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAlterarSenhaAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).AlterarSenhaAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_AlterarSenhaAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).AlterarSenhaAdmin(ctx, req.(*RequestAlterarSenhaAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_AlterarSenhaUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAlterarSenhaUsuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).AlterarSenhaUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_AlterarSenhaUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).AlterarSenhaUsuario(ctx, req.(*RequestAlterarSenhaUsuario))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_AtivarUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).AtivarUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_AtivarUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).AtivarUsuario(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_DesativarUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).DesativarUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_DesativarUsuario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).DesativarUsuario(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUsuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).Login(ctx, req.(*LoginUsuario))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_TokenResetSenha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailReset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).TokenResetSenha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_TokenResetSenha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).TokenResetSenha(ctx, req.(*EmailReset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usuarios_ResetSenha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSenhaUsuario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsuariosServer).ResetSenha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usuarios_ResetSenha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsuariosServer).ResetSenha(ctx, req.(*ResetSenhaUsuario))
	}
	return interceptor(ctx, in, info, handler)
}

// Usuarios_ServiceDesc is the grpc.ServiceDesc for Usuarios service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Usuarios_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Usuarios",
	HandlerType: (*UsuariosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllUsuarios",
			Handler:    _Usuarios_FindAllUsuarios_Handler,
		},
		{
			MethodName: "FindUsuarioById",
			Handler:    _Usuarios_FindUsuarioById_Handler,
		},
		{
			MethodName: "GetPerfisVinculados",
			Handler:    _Usuarios_GetPerfisVinculados_Handler,
		},
		{
			MethodName: "CreateUsuario",
			Handler:    _Usuarios_CreateUsuario_Handler,
		},
		{
			MethodName: "CloneUsuario",
			Handler:    _Usuarios_CloneUsuario_Handler,
		},
		{
			MethodName: "UpdateUsuario",
			Handler:    _Usuarios_UpdateUsuario_Handler,
		},
		{
			MethodName: "AlterarSenhaAdmin",
			Handler:    _Usuarios_AlterarSenhaAdmin_Handler,
		},
		{
			MethodName: "AlterarSenhaUsuario",
			Handler:    _Usuarios_AlterarSenhaUsuario_Handler,
		},
		{
			MethodName: "AtivarUsuario",
			Handler:    _Usuarios_AtivarUsuario_Handler,
		},
		{
			MethodName: "DesativarUsuario",
			Handler:    _Usuarios_DesativarUsuario_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Usuarios_Login_Handler,
		},
		{
			MethodName: "TokenResetSenha",
			Handler:    _Usuarios_TokenResetSenha_Handler,
		},
		{
			MethodName: "ResetSenha",
			Handler:    _Usuarios_ResetSenha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usuarios.proto",
}
