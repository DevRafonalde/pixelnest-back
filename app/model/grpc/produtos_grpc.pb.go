// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: produtos.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Produtos_FindAllProdutos_FullMethodName     = "/grpc.Produtos/FindAllProdutos"
	Produtos_FindProdutoById_FullMethodName     = "/grpc.Produtos/FindProdutoById"
	Produtos_FindProdutoByNome_FullMethodName   = "/grpc.Produtos/FindProdutoByNome"
	Produtos_FindProdutoByGenero_FullMethodName = "/grpc.Produtos/FindProdutoByGenero"
	Produtos_CreateProduto_FullMethodName       = "/grpc.Produtos/CreateProduto"
	Produtos_UpdateProduto_FullMethodName       = "/grpc.Produtos/UpdateProduto"
	Produtos_DeleteProduto_FullMethodName       = "/grpc.Produtos/DeleteProduto"
)

// ProdutosClient is the client API for Produtos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definição do serviço
type ProdutosClient interface {
	FindAllProdutos(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaProdutos, error)
	FindProdutoById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Produto, error)
	FindProdutoByNome(ctx context.Context, in *RequestNome, opts ...grpc.CallOption) (*ListaProdutos, error)
	FindProdutoByGenero(ctx context.Context, in *RequestNome, opts ...grpc.CallOption) (*ListaProdutos, error)
	CreateProduto(ctx context.Context, in *Produto, opts ...grpc.CallOption) (*Produto, error)
	UpdateProduto(ctx context.Context, in *Produto, opts ...grpc.CallOption) (*Produto, error)
	DeleteProduto(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error)
}

type produtosClient struct {
	cc grpc.ClientConnInterface
}

func NewProdutosClient(cc grpc.ClientConnInterface) ProdutosClient {
	return &produtosClient{cc}
}

func (c *produtosClient) FindAllProdutos(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaProdutos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaProdutos)
	err := c.cc.Invoke(ctx, Produtos_FindAllProdutos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *produtosClient) FindProdutoById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Produto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Produto)
	err := c.cc.Invoke(ctx, Produtos_FindProdutoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *produtosClient) FindProdutoByNome(ctx context.Context, in *RequestNome, opts ...grpc.CallOption) (*ListaProdutos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaProdutos)
	err := c.cc.Invoke(ctx, Produtos_FindProdutoByNome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *produtosClient) FindProdutoByGenero(ctx context.Context, in *RequestNome, opts ...grpc.CallOption) (*ListaProdutos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaProdutos)
	err := c.cc.Invoke(ctx, Produtos_FindProdutoByGenero_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *produtosClient) CreateProduto(ctx context.Context, in *Produto, opts ...grpc.CallOption) (*Produto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Produto)
	err := c.cc.Invoke(ctx, Produtos_CreateProduto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *produtosClient) UpdateProduto(ctx context.Context, in *Produto, opts ...grpc.CallOption) (*Produto, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Produto)
	err := c.cc.Invoke(ctx, Produtos_UpdateProduto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *produtosClient) DeleteProduto(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Produtos_DeleteProduto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdutosServer is the server API for Produtos service.
// All implementations must embed UnimplementedProdutosServer
// for forward compatibility.
//
// Definição do serviço
type ProdutosServer interface {
	FindAllProdutos(context.Context, *RequestVazio) (*ListaProdutos, error)
	FindProdutoById(context.Context, *RequestId) (*Produto, error)
	FindProdutoByNome(context.Context, *RequestNome) (*ListaProdutos, error)
	FindProdutoByGenero(context.Context, *RequestNome) (*ListaProdutos, error)
	CreateProduto(context.Context, *Produto) (*Produto, error)
	UpdateProduto(context.Context, *Produto) (*Produto, error)
	DeleteProduto(context.Context, *RequestId) (*ResponseBool, error)
	mustEmbedUnimplementedProdutosServer()
}

// UnimplementedProdutosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProdutosServer struct{}

func (UnimplementedProdutosServer) FindAllProdutos(context.Context, *RequestVazio) (*ListaProdutos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllProdutos not implemented")
}
func (UnimplementedProdutosServer) FindProdutoById(context.Context, *RequestId) (*Produto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProdutoById not implemented")
}
func (UnimplementedProdutosServer) FindProdutoByNome(context.Context, *RequestNome) (*ListaProdutos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProdutoByNome not implemented")
}
func (UnimplementedProdutosServer) FindProdutoByGenero(context.Context, *RequestNome) (*ListaProdutos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProdutoByGenero not implemented")
}
func (UnimplementedProdutosServer) CreateProduto(context.Context, *Produto) (*Produto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduto not implemented")
}
func (UnimplementedProdutosServer) UpdateProduto(context.Context, *Produto) (*Produto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduto not implemented")
}
func (UnimplementedProdutosServer) DeleteProduto(context.Context, *RequestId) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduto not implemented")
}
func (UnimplementedProdutosServer) mustEmbedUnimplementedProdutosServer() {}
func (UnimplementedProdutosServer) testEmbeddedByValue()                  {}

// UnsafeProdutosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdutosServer will
// result in compilation errors.
type UnsafeProdutosServer interface {
	mustEmbedUnimplementedProdutosServer()
}

func RegisterProdutosServer(s grpc.ServiceRegistrar, srv ProdutosServer) {
	// If the following call pancis, it indicates UnimplementedProdutosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Produtos_ServiceDesc, srv)
}

func _Produtos_FindAllProdutos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVazio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdutosServer).FindAllProdutos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Produtos_FindAllProdutos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdutosServer).FindAllProdutos(ctx, req.(*RequestVazio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Produtos_FindProdutoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdutosServer).FindProdutoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Produtos_FindProdutoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdutosServer).FindProdutoById(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Produtos_FindProdutoByNome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNome)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdutosServer).FindProdutoByNome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Produtos_FindProdutoByNome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdutosServer).FindProdutoByNome(ctx, req.(*RequestNome))
	}
	return interceptor(ctx, in, info, handler)
}

func _Produtos_FindProdutoByGenero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNome)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdutosServer).FindProdutoByGenero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Produtos_FindProdutoByGenero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdutosServer).FindProdutoByGenero(ctx, req.(*RequestNome))
	}
	return interceptor(ctx, in, info, handler)
}

func _Produtos_CreateProduto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Produto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdutosServer).CreateProduto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Produtos_CreateProduto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdutosServer).CreateProduto(ctx, req.(*Produto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Produtos_UpdateProduto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Produto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdutosServer).UpdateProduto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Produtos_UpdateProduto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdutosServer).UpdateProduto(ctx, req.(*Produto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Produtos_DeleteProduto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdutosServer).DeleteProduto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Produtos_DeleteProduto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdutosServer).DeleteProduto(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

// Produtos_ServiceDesc is the grpc.ServiceDesc for Produtos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Produtos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Produtos",
	HandlerType: (*ProdutosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllProdutos",
			Handler:    _Produtos_FindAllProdutos_Handler,
		},
		{
			MethodName: "FindProdutoById",
			Handler:    _Produtos_FindProdutoById_Handler,
		},
		{
			MethodName: "FindProdutoByNome",
			Handler:    _Produtos_FindProdutoByNome_Handler,
		},
		{
			MethodName: "FindProdutoByGenero",
			Handler:    _Produtos_FindProdutoByGenero_Handler,
		},
		{
			MethodName: "CreateProduto",
			Handler:    _Produtos_CreateProduto_Handler,
		},
		{
			MethodName: "UpdateProduto",
			Handler:    _Produtos_UpdateProduto_Handler,
		},
		{
			MethodName: "DeleteProduto",
			Handler:    _Produtos_DeleteProduto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "produtos.proto",
}
