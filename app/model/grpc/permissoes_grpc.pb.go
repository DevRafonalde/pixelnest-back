// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: permissoes.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Permissoes_FindAllPermissoes_FullMethodName  = "/grpc.Permissoes/FindAllPermissoes"
	Permissoes_FindPermissaoById_FullMethodName  = "/grpc.Permissoes/FindPermissaoById"
	Permissoes_CreatePermissao_FullMethodName    = "/grpc.Permissoes/CreatePermissao"
	Permissoes_UpdatePermissao_FullMethodName    = "/grpc.Permissoes/UpdatePermissao"
	Permissoes_AtivarPermissao_FullMethodName    = "/grpc.Permissoes/AtivarPermissao"
	Permissoes_DesativarPermissao_FullMethodName = "/grpc.Permissoes/DesativarPermissao"
)

// PermissoesClient is the client API for Permissoes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Definição do serviço
type PermissoesClient interface {
	FindAllPermissoes(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaPermissoes, error)
	FindPermissaoById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Permissao, error)
	CreatePermissao(ctx context.Context, in *Permissao, opts ...grpc.CallOption) (*Permissao, error)
	UpdatePermissao(ctx context.Context, in *Permissao, opts ...grpc.CallOption) (*Permissao, error)
	AtivarPermissao(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error)
	DesativarPermissao(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error)
}

type permissoesClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissoesClient(cc grpc.ClientConnInterface) PermissoesClient {
	return &permissoesClient{cc}
}

func (c *permissoesClient) FindAllPermissoes(ctx context.Context, in *RequestVazio, opts ...grpc.CallOption) (*ListaPermissoes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaPermissoes)
	err := c.cc.Invoke(ctx, Permissoes_FindAllPermissoes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissoesClient) FindPermissaoById(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*Permissao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permissao)
	err := c.cc.Invoke(ctx, Permissoes_FindPermissaoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissoesClient) CreatePermissao(ctx context.Context, in *Permissao, opts ...grpc.CallOption) (*Permissao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permissao)
	err := c.cc.Invoke(ctx, Permissoes_CreatePermissao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissoesClient) UpdatePermissao(ctx context.Context, in *Permissao, opts ...grpc.CallOption) (*Permissao, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permissao)
	err := c.cc.Invoke(ctx, Permissoes_UpdatePermissao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissoesClient) AtivarPermissao(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Permissoes_AtivarPermissao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissoesClient) DesativarPermissao(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*ResponseBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, Permissoes_DesativarPermissao_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissoesServer is the server API for Permissoes service.
// All implementations must embed UnimplementedPermissoesServer
// for forward compatibility.
//
// Definição do serviço
type PermissoesServer interface {
	FindAllPermissoes(context.Context, *RequestVazio) (*ListaPermissoes, error)
	FindPermissaoById(context.Context, *RequestId) (*Permissao, error)
	CreatePermissao(context.Context, *Permissao) (*Permissao, error)
	UpdatePermissao(context.Context, *Permissao) (*Permissao, error)
	AtivarPermissao(context.Context, *RequestId) (*ResponseBool, error)
	DesativarPermissao(context.Context, *RequestId) (*ResponseBool, error)
	mustEmbedUnimplementedPermissoesServer()
}

// UnimplementedPermissoesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissoesServer struct{}

func (UnimplementedPermissoesServer) FindAllPermissoes(context.Context, *RequestVazio) (*ListaPermissoes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPermissoes not implemented")
}
func (UnimplementedPermissoesServer) FindPermissaoById(context.Context, *RequestId) (*Permissao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPermissaoById not implemented")
}
func (UnimplementedPermissoesServer) CreatePermissao(context.Context, *Permissao) (*Permissao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissao not implemented")
}
func (UnimplementedPermissoesServer) UpdatePermissao(context.Context, *Permissao) (*Permissao, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermissao not implemented")
}
func (UnimplementedPermissoesServer) AtivarPermissao(context.Context, *RequestId) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtivarPermissao not implemented")
}
func (UnimplementedPermissoesServer) DesativarPermissao(context.Context, *RequestId) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesativarPermissao not implemented")
}
func (UnimplementedPermissoesServer) mustEmbedUnimplementedPermissoesServer() {}
func (UnimplementedPermissoesServer) testEmbeddedByValue()                    {}

// UnsafePermissoesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissoesServer will
// result in compilation errors.
type UnsafePermissoesServer interface {
	mustEmbedUnimplementedPermissoesServer()
}

func RegisterPermissoesServer(s grpc.ServiceRegistrar, srv PermissoesServer) {
	// If the following call pancis, it indicates UnimplementedPermissoesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Permissoes_ServiceDesc, srv)
}

func _Permissoes_FindAllPermissoes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVazio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissoesServer).FindAllPermissoes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissoes_FindAllPermissoes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissoesServer).FindAllPermissoes(ctx, req.(*RequestVazio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissoes_FindPermissaoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissoesServer).FindPermissaoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissoes_FindPermissaoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissoesServer).FindPermissaoById(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissoes_CreatePermissao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permissao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissoesServer).CreatePermissao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissoes_CreatePermissao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissoesServer).CreatePermissao(ctx, req.(*Permissao))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissoes_UpdatePermissao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permissao)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissoesServer).UpdatePermissao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissoes_UpdatePermissao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissoesServer).UpdatePermissao(ctx, req.(*Permissao))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissoes_AtivarPermissao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissoesServer).AtivarPermissao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissoes_AtivarPermissao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissoesServer).AtivarPermissao(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permissoes_DesativarPermissao_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissoesServer).DesativarPermissao(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Permissoes_DesativarPermissao_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissoesServer).DesativarPermissao(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

// Permissoes_ServiceDesc is the grpc.ServiceDesc for Permissoes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permissoes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Permissoes",
	HandlerType: (*PermissoesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllPermissoes",
			Handler:    _Permissoes_FindAllPermissoes_Handler,
		},
		{
			MethodName: "FindPermissaoById",
			Handler:    _Permissoes_FindPermissaoById_Handler,
		},
		{
			MethodName: "CreatePermissao",
			Handler:    _Permissoes_CreatePermissao_Handler,
		},
		{
			MethodName: "UpdatePermissao",
			Handler:    _Permissoes_UpdatePermissao_Handler,
		},
		{
			MethodName: "AtivarPermissao",
			Handler:    _Permissoes_AtivarPermissao_Handler,
		},
		{
			MethodName: "DesativarPermissao",
			Handler:    _Permissoes_DesativarPermissao_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permissoes.proto",
}
